---

#- name: '[UNINSTALL_CLUSTER] Create a user-writable directory for tools'
#  file:
#    name: "{{ user_path }}"
#    state: directory
#
#- name: '[OCP4-INSTALL] Download the required ocp4 tooling'
#  get_url:
#    url: "{{ var_installer_baseurl }}/{{ pkg }}"
#    dest: "{{ user_path }}/{{ pkg }}"
#  loop:
#    - "{{ var_installer_program }}"
#    - "{{ var_installer_clienttools }}"
#  loop_control:
#    loop_var: pkg
#  register: ocp4_files
#
#- name: '[OCP4-INSTALL] Create a user-writable directory for tools'
#  file:
#    name: "{{ user_path }}"
#    state: directory
#
#- name: '[OCP4-INSTALL] Ensure downloaded installers are unarchived'
#  unarchive:
#    src: "{{ user_path }}/{{ pkg }}"
#    dest: "{{ user_path }}"
#  loop:
#    - "{{ var_installer_program }}"
#    - "{{ var_installer_clienttools }}"
#  loop_control:
#    loop_var: pkg
#  when: ocp4_files.changed

- name: '[INSTALL_CONFIG] Unarchive tower installation files to uninstall after'
  unarchive:
    src: "{{ tower_path }}/{{ cluster_name }}-install.gz"
    dest: "{{ user_path }}"
  when:
    - tower_used is defined
    - tower_used | bool

- shell:
    cmd: "ls -lhrt {{ user_path }}"

#- pause:
#    minutes: 10

- name: '[UNINSTALL_CLUSTER] Uninstalling...'
  shell:
    cmd: "{{ user_path }}/openshift-install destroy cluster --dir {{ user_path }}"
    removes: "{{ user_path }}/terraform.tfstate"

- name: '[UNINSTALL_CLUSTER] Remove working directory'
  file:
    path: "{{ user_path }}"
    state: absent

- name: '[UNINSTALL_CLUSTER] Remove copied kubeconfig'
  file:
    path: "{{ local_kubeconfig }}"
    state: absent
  when:
    - tower_used is defined
    - tower_used | bool
